@model HelperMethods.Models.Person

@{
    ViewBag.Title = "CreatePerson";
    Html.EnableClientValidation(false);
}

<h2>CreatePerson</h2>

<!--使用模板辅助器方法-->
@using (Html.BeginRouteForm("FormRoute", new { }, FormMethod.Post, new { @class = "personClass", data_formType = "person" }))
{
    <div class="dataElem">
        <label>PersonId</label>
        @Html.Editor("PersonId")
    </div>
    <div class="dataElem">
        <label>First Name</label>
        @Html.Editor("FirstName")
    </div>
    <div class="dataElem">
        <label>Last Name</label>
        @Html.EditorFor(m => m.LastName)
    </div>
    <div class="dataElem">
        <label>Role</label>
        @Html.EditorFor(m => m.Role)
    </div>
    <div class="dataElem">
        <label>Birth Date</label>
        @Html.EditorFor(m => m.BirthDate)
    </div>
    <input type="submit" value="提交" />
}

<!--直接使用HTML标签编写-->
@*<form action="/Home/CreatePerson" method="post">
        <div class="dataElem">
            <label>PersonId</label>
            <input name="personId" value="@Model.PersonId"/>
        </div>
        <div class="dataElem">
            <label>First Name</label>
            <input name="firstName" value="@Model.FirstName" />
        </div>
        <div class="dataElem">
            <label>Last Name</label>
            <input name="lastName" value="@Model.LastName" />
        </div>
        <input type="submit" value="提交"/>
    </form>*@

<!--使用 BeginForm 和 EndForm 辅助器方法-->
@*@Html.BeginForm()
    <div class="dataElem">
        <label>PersonId</label>
        <input name="personId" value="@Model.PersonId" />
    </div>
    <div class="dataElem">
        <label>First Name</label>
        <input name="firstName" value="@Model.FirstName" />
    </div>
    <div class="dataElem">
        <label>Last Name</label>
        <input name="lastName" value="@Model.LastName" />
    </div>
    <input type="submit" value="提交" />
    @{Html.EndForm();}*@

<!--创建自关闭的表单-->
@*@using (Html.BeginForm())
    {
        <div class="dataElem">
            <label>PersonId</label>
            <input name="personId" value="@Model.PersonId" />
        </div>
        <div class="dataElem">
            <label>First Name</label>
            <input name="firstName" value="@Model.FirstName" />
        </div>
        <div class="dataElem">
            <label>Last Name</label>
            <input name="lastName" value="@Model.LastName" />
        </div>
        <input type="submit" value="提交" />
    }*@

<!--BeginForm的复杂重载-->
@*@using (Html.BeginForm("CreatePerson", "Home",                          // 动作方法、控制器
        new { id = "MyIdValue" },                                           // 路由配置中 id 片段变量的值
        FormMethod.Post,                                                    // form 元素中 method 标签属性的值
        new { @class = "personClass", data_formType = "person" }))          // form 元素的其他标签属性
                                                                            // 其中 class 前面的 @ 符合是为了使用保留的关键字，这样 class 将会被作为标签属性使用
                                                                            // data_formType 中使用下划线是因为在 C# 中不能使用连接符，但这最终会被映射为连接符
    {
        <div class="dataElem">
            <label>PersonId</label>
            <input name="personId" value="@Model.PersonId" />
        </div>
        <div class="dataElem">
            <label>First Name</label>
            <input name="firstName" value="@Model.FirstName" />
        </div>
        <div class="dataElem">
            <label>Last Name</label>
            <input name="lastName" value="@Model.LastName" />
        </div>
        <input type="submit" value="提交" />
    }*@

@*@using (Html.BeginRouteForm("FormRoute",                        // 使用 BeginRouteForm 方法；指定路由名：FormRoute
        new { },                                                    // 用于路由片段变量
        FormMethod.Post,                                            // 用于 form 的 method 标签属性
        new { @class = "personClass", data_formType = "person" }))  // 用于 form 的其他标签属性
    {
        <div class="dataElem">
            <label>PersonId</label>
            @Html.TextBoxFor(m => m.PersonId)
        </div>
        <div class="dataElem">
            <label>First Name</label>
            @Html.TextBoxFor(m => m.FirstName)
        </div>
        <div class="dataElem">
            <label>Last Name</label>
            @Html.TextBoxFor(m => m.LastName)
        </div>
        <div class="dataElem">
            <label>Role</label>
            @Html.DropDownListFor(m => m.Role, new SelectList(Enum.GetNames(typeof(HelperMethods.Models.Role))))
        </div>
        <input type="submit" value="提交" />
    }*@
